generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique @db.VarChar(255)
  password         String?   @db.VarChar(255)
  name             String?   @db.VarChar(255)
  role             String?   @default("ADMINISTRATOR") @db.VarChar(50)
  auth_provider    String?   @default("EMAIL") @db.VarChar(50)
  telegramId       BigInt?   @unique @map("telegram_id")
  telegramUsername String?   @map("telegram_username") @db.VarChar(255)
  telegramPhotoUrl String?   @map("telegram_photo_url")
  isActive         Boolean?  @default(true) @map("is_active")
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  inspectionSessions InspectionSession[]
  draftObservations DraftObservation[]

  @@map("users")
}

model InspectionSession {
  id                      String                    @id @default(cuid())
  province                String                    @db.VarChar(100)
  provinceCode            String?                   @map("province_code") @db.VarChar(10)
  provinceNameKh          String?                   @map("province_name_kh") @db.VarChar(100)
  district                String                    @db.VarChar(100)
  districtCode            String?                   @map("district_code") @db.VarChar(10)
  districtNameKh          String?                   @map("district_name_kh") @db.VarChar(100)
  commune                 String                    @db.VarChar(100)
  communeCode             String?                   @map("commune_code") @db.VarChar(10)
  communeNameKh           String?                   @map("commune_name_kh") @db.VarChar(100)
  village                 String?                   @db.VarChar(100)
  villageCode             String?                   @map("village_code") @db.VarChar(10)
  villageNameKh           String?                   @map("village_name_kh") @db.VarChar(100)
  cluster                 String?                   @db.VarChar(100)
  school                  String                    @db.VarChar(255)
  schoolId                Int?                      @map("school_id")
  nameOfTeacher           String                    @map("name_of_teacher") @db.VarChar(255)
  sex                     String                    @db.VarChar(10)
  employmentType          String                    @map("employment_type") @db.VarChar(20)
  sessionTime             String                    @map("session_time") @db.VarChar(20)
  subject                 String                    @db.VarChar(100)
  chapter                 String?                   @db.VarChar(10)
  lesson                  String?                   @db.VarChar(10)
  title                   String?
  subTitle                String?                   @map("sub_title")
  inspectionDate          DateTime                  @map("inspection_date") @db.Timestamp(3)
  startTime               DateTime?                 @map("start_time") @db.Time(6)
  endTime                 DateTime?                 @map("end_time") @db.Time(6)
  grade                   Int
  totalMale               Int                       @default(0) @map("total_male")
  totalFemale             Int                       @default(0) @map("total_female")
  totalAbsent             Int                       @default(0) @map("total_absent")
  totalAbsentFemale       Int                       @default(0) @map("total_absent_female")
  level                   Int                       @default(1)
  evaluationLevels        Int[]                     @default([]) @map("evaluation_levels")
  inspectorName           String?                   @map("inspector_name") @db.VarChar(255)
  inspectorPosition       String?                   @map("inspector_position") @db.VarChar(100)
  inspectorOrganization   String?                   @map("inspector_organization") @db.VarChar(255)
  academicYear            String?                   @map("academic_year") @db.VarChar(20)
  semester                Int?
  lessonDurationMinutes   Int?                      @map("lesson_duration_minutes")
  inspectionStatus        String                    @default("completed") @map("inspection_status") @db.VarChar(20)
  generalNotes            String?                   @map("general_notes")
  createdAt               DateTime                  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt               DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  createdBy               String?                   @map("created_by") @db.VarChar(255)
  isActive                Boolean                   @default(true) @map("is_active")
  userId                  Int?                      @map("user_id")

  // Relations
  user                    User?                     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  evaluationRecords       EvaluationRecord[]
  studentAssessmentSessions StudentAssessmentSession[]
  aiAnalysisResults       AiAnalysisResult[]

  @@index([province])
  @@index([district])
  @@index([school])
  @@index([nameOfTeacher])
  @@index([inspectionDate])
  @@index([grade])
  @@index([subject])
  @@index([level])
  @@index([inspectionStatus])
  @@index([isActive])
  @@map("inspection_sessions")
}

model MasterField {
  fieldId            Int                @id @default(autoincrement()) @map("field_id")
  indicatorSequence  Int                @unique @map("indicator_sequence")
  indicatorMain      String             @map("indicator_main") @db.VarChar(100)
  indicatorMainEn    String             @map("indicator_main_en") @db.VarChar(200)
  indicatorSub       String             @map("indicator_sub")
  indicatorSubEn     String             @map("indicator_sub_en")
  evaluationLevel    Int                @map("evaluation_level")
  scoringOptions     Json?              @default("{\"yes\": true, \"some_practice\": true, \"no\": true}") @map("scoring_options")
  aiContext          String?            @map("ai_context")
  isActive           Boolean            @default(true) @map("is_active")
  createdAt          DateTime           @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt          DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  // Relations
  evaluationRecords  EvaluationRecord[]

  @@index([evaluationLevel])
  @@index([indicatorMain])
  @@index([isActive])
  @@index([indicatorSequence])
  @@map("master_fields")
}

model EvaluationRecord {
  id                  String            @id @default(cuid())
  inspectionSessionId String            @map("inspection_session_id")
  fieldId             Int               @map("field_id")
  scoreValue          String            @map("score_value") @db.VarChar(20)
  notes               String?
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamp(3)
  createdBy           String?           @map("created_by") @db.VarChar(255)

  // Relations
  inspectionSession   InspectionSession @relation(fields: [inspectionSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  field               MasterField       @relation(fields: [fieldId], references: [fieldId], onDelete: Restrict, onUpdate: Cascade)

  @@unique([inspectionSessionId, fieldId])
  @@index([inspectionSessionId])
  @@index([fieldId])
  @@map("evaluation_records")
}

model StudentAssessmentSession {
  assessmentId        String              @id @map("assessment_id")
  inspectionSessionId String              @map("inspection_session_id")
  assessmentType      String              @default("sample_students") @map("assessment_type") @db.VarChar(50)
  assessmentDate      DateTime            @default(now()) @map("assessment_date") @db.Timestamp(3)
  notes               String?
  createdAt           DateTime            @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt           DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  isActive            Boolean             @default(true) @map("is_active")

  // Relations
  inspectionSession   InspectionSession   @relation(fields: [inspectionSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjects            AssessmentSubject[]
  students            AssessmentStudent[]
  scores              StudentScore[]

  @@index([inspectionSessionId])
  @@map("student_assessment_sessions")
}

model AssessmentSubject {
  subjectId       String                    @id @map("subject_id")
  assessmentId    String                    @map("assessment_id")
  subjectNameKm   String                    @map("subject_name_km") @db.VarChar(100)
  subjectNameEn   String?                   @map("subject_name_en") @db.VarChar(100)
  subjectOrder    Int                       @map("subject_order")
  maxScore        Decimal                   @default(100.00) @map("max_score") @db.Decimal(5, 2)
  minScore        Decimal                   @default(0.00) @map("min_score") @db.Decimal(5, 2)
  createdAt       DateTime                  @default(now()) @map("created_at") @db.Timestamp(3)

  // Relations
  assessment      StudentAssessmentSession  @relation(fields: [assessmentId], references: [assessmentId], onDelete: Cascade, onUpdate: Cascade)
  scores          StudentScore[]

  @@index([assessmentId])
  @@map("assessment_subjects")
}

model AssessmentStudent {
  studentId         String                    @id @map("student_id")
  assessmentId      String                    @map("assessment_id")
  studentIdentifier String                    @map("student_identifier") @db.VarChar(50)
  studentOrder      Int                       @map("student_order")
  studentName       String?                   @map("student_name") @db.VarChar(255)
  studentGender     String?                   @map("student_gender") @db.VarChar(10)
  createdAt         DateTime                  @default(now()) @map("created_at") @db.Timestamp(3)

  // Relations
  assessment        StudentAssessmentSession  @relation(fields: [assessmentId], references: [assessmentId], onDelete: Cascade, onUpdate: Cascade)
  scores            StudentScore[]

  @@index([assessmentId])
  @@map("assessment_students")
}

model StudentScore {
  scoreId       String                    @id @map("score_id")
  assessmentId  String                    @map("assessment_id")
  subjectId     String                    @map("subject_id")
  studentId     String                    @map("student_id")
  score         Decimal?                  @db.Decimal(5, 2)
  scoreText     String?                   @map("score_text") @db.VarChar(20)
  notes         String?
  createdAt     DateTime                  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt     DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  // Relations
  assessment    StudentAssessmentSession  @relation(fields: [assessmentId], references: [assessmentId], onDelete: Cascade, onUpdate: Cascade)
  subject       AssessmentSubject         @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade, onUpdate: Cascade)
  student       AssessmentStudent         @relation(fields: [studentId], references: [studentId], onDelete: Cascade, onUpdate: Cascade)

  @@unique([assessmentId, subjectId, studentId])
  @@index([assessmentId])
  @@index([subjectId])
  @@index([studentId])
  @@map("student_scores")
}

model AiAnalysisResult {
  id                    String              @id @default(cuid())
  inspectionSessionId   String              @map("inspection_session_id")
  analysisType          String              @default("general") @map("analysis_type") @db.VarChar(50)
  overallScore          Int?                @map("overall_score")
  performanceLevel      String?             @map("performance_level") @db.VarChar(50)
  strengths             Json?
  areasForImprovement   Json?               @map("areas_for_improvement")
  recommendations       Json?
  detailedFeedback      String?             @map("detailed_feedback")
  language              String              @default("km") @db.VarChar(10)
  metadata              Json?
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt             DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  createdBy             String?             @map("created_by") @db.VarChar(255)

  // Relations
  inspectionSession     InspectionSession   @relation(fields: [inspectionSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([inspectionSessionId, analysisType])
  @@index([inspectionSessionId])
  @@index([analysisType])
  @@index([createdAt])
  @@map("ai_analysis_results")
}

model DraftObservation {
  id              String    @id @default(cuid())
  sessionKey      String    @unique @map("session_key")
  step            Int       @default(1)
  sessionInfo     Json?     @map("session_info")
  evaluationData  Json?     @map("evaluation_data")
  studentAssessment Json?   @map("student_assessment")
  status          String    @default("draft") @db.VarChar(20)
  userId          Int?      @map("user_id")
  userEmail       String?   @map("user_email") @db.VarChar(255)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  expiresAt       DateTime? @map("expires_at") @db.Timestamp(6)

  // Relations
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("draft_observations")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Geographic {
  id               Int
  provinceCode     Int?    @map("province_code")
  provinceNameKh   String? @map("province_name_kh") @db.VarChar(255)
  province_name_en String? @db.VarChar(255)
  districtCode     BigInt? @map("district_code")
  districtNameKh   String? @map("district_name_kh") @db.VarChar(255)
  district_name_en String? @db.VarChar(255)
  communeCode      BigInt? @map("commune_code")
  communeNameKh    String? @map("commune_name_kh") @db.VarChar(255)
  commune_name_en  String? @db.VarChar(255)
  villageCode      BigInt? @map("village_code")
  villageNameKh    String? @map("village_name_kh") @db.VarChar(255)
  village_name_en  String? @db.VarChar(255)
  created_at       String? @db.VarChar(255)
  updated_at       String? @db.VarChar(255)
  deleted_at       String? @db.VarChar(255)

  @@map("geographic")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model schools {
  sclAutoID             Int
  sclName               String?   @db.VarChar(255)
  sclCode               String?   @db.VarChar(255)
  sclCluster            String?   @db.VarChar(255)
  sclCommune            String?   @db.VarChar(255)
  sclDistrict           String?   @db.VarChar(255)
  sclProvince           String?   @db.VarChar(255)
  sclZone               String?   @db.VarChar(255)
  sclOrder              Int?
  sclStatus             Int?
  sclImage              String?   @db.VarChar(255)
  sclZoneName           String?   @db.VarChar(45)
  sclProvinceName       String?   @db.VarChar(45)
  sclDistrictName       String?   @db.VarChar(45)
  updated_at            DateTime? @db.Timestamp(6)
  total_students        Int?
  total_teachers        Int?
  total_teachers_female Int?
  total_students_female Int?
  created_at            DateTime? @db.Timestamp(6)
  deleted_at            DateTime? @db.Timestamp(6)
  updatedat             DateTime? @db.Timestamp(6)
  latitude              Float?
  longitude             Float?
  province_code         Int?

  @@ignore
}
